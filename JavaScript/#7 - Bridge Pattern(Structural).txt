Description

The bridge pattern allows separate components/classes/objects with separate interfaces/methods to work together
Its main goal is to write better code through two levels of abstraction. 
It facilitates very loose coupling of objects. It is sometimes referred to as a double Adapter pattern.


Usage

if you want to extend a class in several independent dimensions

if you want to change the implementation at run time

if you want to share the implementation/methods between objects


REFERENCE

https://www.dofactory.com/javascript/design-patterns/bridge
https://www.educative.io/collection/page/5429798910296064/5725579815944192/4525900851838976
https://javascript.plainenglish.io/the-bridge-pattern-design-patterns-meet-the-frontend-c2f09a009ab
https://betterprogramming.pub/the-bridge-design-pattern-in-javascript-5427dd1c8660


CODE



// input devices

var Gestures = function (output) {
    this.output = output;

    this.tap = function () { this.output.click(); }
    this.swipe = function () { this.output.move(); }
    this.pan = function () { this.output.drag(); }
    this.pinch = function () { this.output.zoom(); }
};

var Mouse = function (output) {
    this.output = output;

    this.click = function () { this.output.click(); }
    this.move = function () { this.output.move(); }
    this.down = function () { this.output.drag(); }
    this.wheel = function () { this.output.zoom(); }
};

// output devices

var Screen = function () {
    this.click = function () { console.log("Screen select"); }
    this.move = function () { console.log("Screen move"); }
    this.drag = function () { console.log("Screen drag"); }
    this.zoom = function () { console.log("Screen zoom in"); }
};

var Audio = function () {
    this.click = function () { console.log("Sound oink"); }
    this.move = function () { console.log("Sound waves"); }
    this.drag = function () { console.log("Sound screetch"); }
    this.zoom = function () { console.log("Sound volume up"); }
};

function run() {

    var screen = new Screen();
    var audio = new Audio();

    var hand = new Gestures(screen);
    var mouse = new Mouse(audio);

    hand.tap();
    hand.swipe();
    hand.pinch();

    mouse.click();
    mouse.move();
    mouse.wheel();
}
